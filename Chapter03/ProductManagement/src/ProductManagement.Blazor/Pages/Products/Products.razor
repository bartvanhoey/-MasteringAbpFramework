
@page "/products"
@inherits ProductManagementComponentBase

@using Blazorise
@using Blazorise.DataGrid
@using ProductManagement.Products
@using Volo.Abp.BlazoriseUI
@using Volo.Abp.AspNetCore.Components.Web
@using ProductManagement.Localization
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Permissions
@using Volo.Abp.Application.Dtos
@using Volo.Abp.ObjectMapping
@inject IProductAppService ProductAppService
@inject IStringLocalizer<ProductManagementResource> L
@inject AbpBlazorMessageLocalizerHelper<ProductManagementResource> LH

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L["Products"]</h2>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Primary" Clicked="OpenCreateModal">@L["ProductNew"]</Button>
                @* @if (CanCreateProduct)
                {
                } *@
            </Column>
        </Row>
    </CardHeader>

    <CardBody>
        <DataGrid TItem="ProductDto" Data="ProductList" ReadData="OnDataGridReadAsync" TotalItems="TotalCount"
            ShowPager="true" PageSize="PageSize">
            <DataGridColumns>
                <DataGridColumn Width="150px" TItem="ProductDto" Field="@nameof(ProductDto.Id)" Sortable="true"
                    Caption="@L["Actions"]">
                    <DisplayTemplate>
                        <Dropdown>
                            <DropdownToggle Color="Color.Primary">
                                @L["Actions"]
                            </DropdownToggle>
                            <DropdownMenu>

                                <DropdownItem Clicked="() => OpenEditModal(context)">
                                    @L["Edit"]
                                </DropdownItem>
                                @* @if (CanUpdateProduct)
                                {
                                } *@
                                @* @if (CanDeleteProduct)
                                {
                                
                                } *@

<DropdownItem Clicked="() => DeleteProductAsync(context)">
                                @L["Delete"]
                                </DropdownItem>

                            </DropdownMenu>
                        </Dropdown>
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="ProductDto" Field="@nameof(ProductDto.Name)" Caption="@L["ProductPropertyName"]">
                </DataGridColumn>
                <DataGridColumn TItem="ProductDto" Field="@nameof(ProductDto.Price)" Caption="@L["ProductPrice"]">
                </DataGridColumn>
                <DataGridColumn TItem="ProductDto" Field="@nameof(ProductDto.CategoryName)"
                    Caption="@L["ProductCategoryName"]"></DataGridColumn>
                <DataGridColumn TItem="ProductDto" Field="@nameof(ProductDto.StockState)"
                    Caption="@L["ProductStockState"]">
                    <DisplayTemplate>
                        @L[$"Enum:ProductStockState.{(ProductStockState)context.StockState}"]
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="ProductDto" Field="@nameof(ProductDto.CreationTime)"
                    Caption="@L["ProductCreationTime"]">
                    <DisplayTemplate>
                        @context.CreationTime.ToShortDateString()
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

<Modal @ref="CreateModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true" Size="ModalSize.Default">
        <ModalHeader>
            <ModalTitle>@L["ProductNew"]</ModalTitle>
            <CloseButton Clicked="CloseCreateModalAsync" />
        </ModalHeader>
        <ModalBody>
            <Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                <Field>
                    <FieldLabel>@L["ProductCategory"]</FieldLabel>
                    <Select TValue="Guid" @bind-SelectedValue="@NewEntity.CategoryId">
                        @* <SelectItem TValue="Guid" Value="Guid.Empty">@L["PickAnCategory"]</SelectItem> *@
                        @foreach (var item in Categories)
                        {
                            <SelectItem TValue="Guid" Value="@item.Id">
                                @item.Name
                            </SelectItem>
                        }
                    </Select>
                </Field>
                <Validation MessageLocalizer="@LH.Localize">
                    <Field>
                        <FieldLabel>@L["ProductName"]</FieldLabel>
                        <TextEdit @bind-Text="@NewEntity.Name" />
                    </Field>
                </Validation>
                <Field>
                    <FieldLabel>@L["ProductPrice"]</FieldLabel>
                    <NumericEdit TValue="float" @bind-Value="@NewEntity.Price" />
                </Field>
                <Field>
                    <FieldLabel>@L["ProductIsFreeCargo"]</FieldLabel>
                    <Check TValue="bool" @bind-Checked="@NewEntity.IsFreeCargo">Is Cargo Free?</Check>
                </Field>
                <Field>
                    <FieldLabel>@L["ProductReleaseDate"]</FieldLabel>
                    <DateEdit TValue="DateTime" @bind-Date="@NewEntity.ReleaseDate" />
                </Field>

                <Field>
                    <FieldLabel>@L["ProductStockState"]</FieldLabel>
                    <Select TValue="ProductStockState" @bind-SelectedValue="@NewEntity.StockState">
                        @foreach (int value in Enum.GetValues(typeof(ProductStockState)))
                        {
                            <SelectItem TValue="ProductStockState" Value="@((ProductStockState)value)">
                                @L[$"Enum:ProductStockState.{value}"]
                            </SelectItem>
                        }
                    </Select>
                </Field>
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="CloseCreateModalAsync">@L["Cancel"]</Button>
            <Button Color="Color.Primary" Type="@ButtonType.Submit" PreventDefaultOnSubmit="true"
                Clicked="CreateEntityAsync">@L["Save"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>





<Modal @ref="EditModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true" Size="ModalSize.Default">
        <ModalHeader>
            <ModalTitle>@EditingEntity.Name</ModalTitle>
            <CloseButton Clicked="CloseEditModalAsync" />
        </ModalHeader>
        <ModalBody>
            <Validations @ref="@EditValidationsRef" Model="@EditingEntity" ValidateOnLoad="false">
                
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="CloseEditModalAsync">@L["Cancel"]</Button>
            <Button Color="Color.Primary" Type="@ButtonType.Submit" PreventDefaultOnSubmit="true"
                Clicked="UpdateEntityAsync">@L["Save"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>






@code
{
    protected IReadOnlyList<ProductDto> ProductList { get; set; }
    protected IReadOnlyList<CategoryLookupDto> Categories { get; set; } = [];


    protected int PageSize { get; } = LimitedResultRequestDto.DefaultMaxResultCount;
    protected int CurrentPage { get; set; }
    protected string CurrentSorting { get; set; }
    protected int TotalCount { get; set; }

    protected bool CanCreateProduct { get; set; } = true;
    protected bool CanUpdateProduct { get; set; } = true;
    protected bool CanDeleteProduct { get; set; } = true;

    protected CreateUpdateProductDto NewEntity { get; set; } = new CreateUpdateProductDto();

    protected Guid EditingProductId { get; set; }
    protected CreateUpdateProductDto EditingEntity { get; set; } = new CreateUpdateProductDto();

    protected Modal? CreateModal { get; set; }
    protected Modal? EditModal { get; set; }

    private Validations? CreateValidationsRef;
    private Validations? EditValidationsRef;


    protected override async Task OnInitializedAsync()
    {
        await SetPermissionsAsync();
        await GetProductsAsync();


    }

    protected async Task SetPermissionsAsync()
    {
        // CanCreateProduct = await AuthorizationService.IsGrantedAsync(ProductManagementPermissions.Product.Create);
        // CanUpdateProduct = await AuthorizationService.IsGrantedAsync(ProductManagementPermissions.Product.Update);
        // CanDeleteProduct = await AuthorizationService.IsGrantedAsync(ProductManagementPermissions.Product.Delete);
    }

    protected void OpenCreateModal()
    {
        CreateValidationsRef?.ClearAll();
        NewEntity = new CreateUpdateProductDto();
        CreateModal?.Show();
    }

    protected void CloseCreateModalAsync()
    {
        CreateModal?.Hide();
    }

    protected void OpenEditModal(ProductDto Product)
    {

        EditValidationsRef?.ClearAll();
        EditingProductId = Product.Id;
        EditingEntity = ObjectMapper.Map<ProductDto, CreateUpdateProductDto>(Product);
        EditModal?.Show();
    }

    protected async Task DeleteProductAsync(ProductDto Product)
{
var confirmMessage = L["ProductDeletionConfirmationMessage", Product?.Name ?? "product"];
if (!await Message.Confirm(confirmMessage))
{
return;
}

await ProductAppService.DeleteAsync(Product.Id);
await GetProductsAsync();
}

    protected async Task GetProductsAsync()
    {
        var result = await ProductAppService.GetPagedListAsync(new PagedAndSortedResultRequestDto());
        ProductList = result.Items;
        TotalCount = (int)result.TotalCount;

        var categories = await ProductAppService.GetCategoriesAsync();
        Categories = categories.Items;

    }

    protected async Task OnDataGridReadAsync(DataGridReadDataEventArgs<ProductDto> e)
    {
        CurrentSorting = e.Columns
        .Where(c => c.SortDirection != SortDirection.Default)
        .Select(c => c.Field + (c.SortDirection == SortDirection.Descending ? "DESC" : ""))
        .JoinAsString(",");
        CurrentPage = e.Page - 1;

        await GetProductsAsync();

        await InvokeAsync(StateHasChanged);
    }

    protected void CloseEditModalAsync()
    {
        EditModal.Hide();
    }

    protected async Task CreateEntityAsync()
    {

        if (await CreateValidationsRef.ValidateAll())
        {
            await ProductAppService.CreateAsync(NewEntity);
            await GetProductsAsync();
            await CreateModal.Hide();
        }
    }

    protected async Task UpdateEntityAsync()
    {
        if (await EditValidationsRef.ValidateAll())
        {
            await ProductAppService.UpdateAsync(EditingProductId, EditingEntity);
            await GetProductsAsync();
            EditModal.Hide();
        }
    }

}
